# System-wide services
services:
  - class: org.yamcs.http.HttpServer
    args:
      port: 8090
      #enable the following three options to have a TLS (https) connection
      #the crt file can contain also the CA crt
      #tlsCert: /opt/yamcs/etc/yamcs-server.crt
      #tlsKey: /opt/yamcs/etc/yamcs-server.key

      # Indicates whether zero-copy can be used to optimize non-ssl static file serving
      # Leave this true unless you encounter a specific deployment issue (e.g. some docker hosts)
      zeroCopyEnabled: true

      # Configure Crossâ€”origin Resource Sharing for the REST API.
      # This facilitates use of the API in browser applications.
      # Note that as per W3C spec the exact allowed origin MUST be defined if credentials are to be passed.
      #cors:
      #  allowOrigin: "*"
      #  allowCredentials: false

      #WebSocket configurations
      webSocket:

        # Configure netty write buffers for the websockets. 
        # If the buffer is full, then websocket messages will be dropped and you see log messages:
        #    Dropping {} message for client [id={}, username={}] because channel is not or no longer writable
        # After a few consecutive dropped messages (the number can be configured below), the connection will be closed.
        # The clients can see that they lost a message from the sequence count in each received websocket data frame.
        #
        # The higher the values, the more memory may be consumed but the connections will be more resilient 
        # against unstable networks (i.e. high jitter).
        # Increasing the values also helps if a large number of messages(events, alarms, parameters, etc)
        # are generated in bursts.
        writeBufferWaterMark:
          low: 32768
          high: 65536

#instances (or domains). One yarch database will be created for each of them 
# instance specific properties go into the file yamcs.{instance}.yaml
instances:
  - simulator

#the location of the data and the incoming files
# inside there should be a different directory for each instance and for each data type (e.g. /storage/yamcs-data/testinst/tm)
dataDir: /storage/yamcs-data
incomingDir: /storage/yamcs-incoming

archive:
  #max length of the data of type binary(e.g. tm packets)
  maxBinaryLength: 1048576

#set the serverId if you want something else than hostname to be used in system parameters generated by yamcs
#serverId: yamcs1

#rocksdb table configuration
rdbConfig:
  tablespaceConfig:
    # config for the "simulation" tablespace. Any regular expression can be used to match the table name
    # see https://github.com/facebook/rocksdb/blob/master/include/rocksdb/options.h for an explanation on the various options
    - tablespaceNamePattern: ".*"
      numLevels: 7
      maxOpenFiles: 1000
      targetFileSizeBase: 10240     #KB
      targetFileSizeMultiplier: 2
      maxBytesForLevelBase: 102400  #KB
      maxBytesForLevelMultiplier: 10
      writeBufferSize: 50240        #KB
      maxWriteBufferNumber: 2
      maxBackgroundFlushes: 2
      allowConcurrentMemtableWrite: false
      minWriteBufferNumberToMerge: 1
      level0FileNumCompactionTrigger: 4
      level0SlowdownWritesTrigger: 20
      level0StopWritesTrigger: 36
      compressionType: snappy
      bottommostCompressionType: zstd
      tableFormatConfig:
           blockSize: 64 #KB
           noBlockCache: true
              
# Secret key unique to a particular Yamcs installation.
# This is used to provide cryptographic signing.
secretKey: "changeme"
