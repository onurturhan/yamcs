syntax="proto2";

package yamcs.protobuf.timeline;
option java_package = "org.yamcs.protobuf";
option java_outer_classname = "TimelineProto";
option java_multiple_files = true;

import "yamcs/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

//Methods related to the Timeline Service.
service TimelineApi {

  // Create an item
  rpc CreateItem(CreateItemRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      post: "/api/timeline/{instance}/items"
      body: "*"
    };
  }

  // Get an item
  rpc GetItem(GetItemRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/items/{id}"
    };
  }
  
  // Update an item
  rpc UpdateItem(UpdateItemRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      put: "/api/timeline/{instance}/items/{id}"
      body: "*"
    };
  }

  // List items
  rpc ListItems(ListItemsRequest) returns (ListItemsResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/items"
    };
  }

  // Delete an item
  rpc DeleteItem(DeleteItemRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      delete: "/api/timeline/{instance}/items/{id}"
    };
  }

  // Delete a group
  rpc DeleteTimelineGroup(DeleteTimelineGroupRequest) returns (TimelineItem) {
    option (yamcs.api.route) = {
      delete: "/api/timeline/{instance}/groups/{id}"
    };
  }

  // List timeline sources
  //
  // Usually there is a source named 'rdb' which provides items from an internal RocksDB database.
  // Other external sources may be created by adding plugins (e.g. a shift planner)
  rpc ListSources(ListSourcesRequest) returns (ListSourcesResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/sources"
    };
  }
  
  // List all tags available for a source
  //
  // Note that currently the 'rdb' source does not discard unused tags
  // (e.g. if all item using one tag have been deleted, the tag will still be returned by this call)
  rpc ListTags(ListTimelineTagsRequest) returns (ListTimelineTagsResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/tags"
    };
  }
  
  // Add a band. The band must not have the id set.
  rpc AddBand(AddBandRequest) returns (TimelineBand) {
    option (yamcs.api.route) = {
      post: "/api/timeline/{instance}/bands"
      body: "*"
    };
  }

  // Get a band
  rpc GetBand(GetBandRequest) returns (TimelineBand) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/bands/{id}"
    };
  }

  // List all bands
  rpc ListBands(ListBandsRequest) returns (ListBandsResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/bands"
    };
  }

  // Update a band
  rpc UpdateBand(UpdateBandRequest) returns (TimelineBand) {
    option (yamcs.api.route) = {
      put: "/api/timeline/{instance}/bands/{id}"
      body: "*"
    };
  }

  // Delete a band
  rpc DeleteBand(DeleteBandRequest) returns (TimelineBand) {
    option (yamcs.api.route) = {
      delete: "/api/timeline/{instance}/bands/{id}"
    };
  }

  // Add a view
  rpc AddView(AddViewRequest) returns (TimelineView) {
    option (yamcs.api.route) = {
      post: "/api/timeline/{instance}/views"
      body: "*"
    };
  }

  // Get a view
  rpc GetView(GetViewRequest) returns (TimelineView) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/views/{id}"
    };
  }

  // List all views
  rpc ListViews(ListViewsRequest) returns (ListViewsResponse) {
    option (yamcs.api.route) = {
      get: "/api/timeline/{instance}/views"
    };
  }

  // Update a view
  rpc UpdateView(UpdateViewRequest) returns (TimelineView) {
    option (yamcs.api.route) = {
      put: "/api/timeline/{instance}/views/{id}"
      body: "*"
    };
  }

  // Delete a view
  rpc DeleteView(DeleteViewRequest) returns (TimelineView) {
    option (yamcs.api.route) = {
      delete: "/api/timeline/{instance}/views/{id}"
    };
  }
}

message RelativeTime {
	// Identifier of the item that this time is relative to.
	optional string relto = 1;
	
	optional google.protobuf.Duration relativeStart = 2;
}

enum TimelineItemType {
    //events are the most generic timeline items.
	EVENT = 1;
	
	//unlike events, activities have an execution status
	//manual activity's execution status is controlled by an operator
	MANUAL_ACTIVITY = 2;
	
	//activity which is automatically executed on the server (the status changes automatically)
	AUTO_ACTIVITY = 3;

	//a grouping of other items (events and/or activities)
	ITEM_GROUP = 4;
	
	//a grouping of activities - unlike the ITEM_GROUP, this group in itself is an automated activity
	ACTIVITY_GROUP = 5;
}
  
message TimelineItem {
  // Item identifier
  optional string id = 1;
  
  // Item name
  optional string name = 2;
  
  optional TimelineItemType type = 3;
  optional google.protobuf.Timestamp start = 4;
  optional google.protobuf.Duration duration = 5;
  repeated string tags = 6;
  //if this item is part of a group, this is the group identifier
  optional string groupId = 7;
    
  //if this item time specification is relative to another item, relativeTime contains a reference
  // to that item as well as the relative start (the duration is the same as given by the duration above)
  //note that start of the item will be computed by the server based on the relativeTime before sending the item to the client
  optional RelativeTime relativeTime = 8;
}

enum TimelineBandType {
  TIME_RULER = 1;
  ITEM_BAND = 2;
  SPACER = 3;
  COMMAND_BAND = 4;
}

message TimelineBand {
  // Yamcs instance name
  optional string instance = 1;

  // Band identifier
  optional string id = 2;

  // Band name
  optional string name = 3;

  //user who has created the band
  optional string username = 4;

  //if true, all users have access to this band, otherwise only the user who has created it
  optional bool shared = 5;

  //the band contains only items from this source
  optional string source = 6;

  //the band contains only items with these tags; if the list is empty, then all items from the given source are part of the band
  repeated string tags = 7;

  //a query filter which can be used to limit additionally the items which are part of the band
  //optional string filter = 8;

  // Type of band
  optional TimelineBandType type = 9;

  // Band description
  optional string description = 10;

  // Additional properties used by yamcs-web to render this band
  map<string, string> properties = 11;
}

message TimelineView {
  // Yamcs instance name
  optional string instance = 1;

  // View identifier
  optional string id = 2;

  // View name
  optional string name = 3;

  // View description
  optional string description = 4;

  // array of bands
  repeated TimelineBand bands = 5;
}

/******************* Items ***********************/
message CreateItemRequest {
  // Yamcs instance name
  optional string instance = 1;
  
  // Item source
  optional string source = 2;
  
  // Item name
  optional string name = 3;
  
  // Type of item
  optional TimelineItemType type = 4;

  //item start. The start and the relativeTime (below) are mutually exclusive
  optional google.protobuf.Timestamp start = 5;
  
  //item duration. Applies also if the relativeTime is specified
  optional google.protobuf.Duration duration = 6;
  
  //tags
  repeated string tags = 7;
  
  //if this item is part of a group, this is the group identifier
  optional string groupId = 8;
    
  //if this item time specification is relative to another item, relativeTime contains a reference
  // to that item as well as the relative start (the duration is the same as given by the duration above)
  optional RelativeTime relativeTime = 9;
}

message GetItemRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;
}

message UpdateItemRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;
  
  // Item name
  optional string name = 4;

  //new start time
  optional google.protobuf.Timestamp start = 5;

  //new duration
  optional google.protobuf.Duration duration = 6;

  //new tags
  repeated string tags = 7;

  //new group identifier
  optional string groupId = 8;

  //new relative time
  optional RelativeTime relativeTime = 9;
}

message ListItemsRequest {
  //Yamcs instance name
  optional string instance = 1;

  // Item source
  optional string source = 2;
      
  optional int32 limit = 3;

  // Continuation token returned by a previous page response.
  optional string next = 4;
  
  optional google.protobuf.Timestamp start = 5;
  optional google.protobuf.Timestamp stop = 6;
  
  // Include only items matching a specific band's tags
  optional string band = 7;
}


message DeleteItemRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Item identifier
  optional string id = 3;
}

message DeleteTimelineGroupRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Item source
  optional string source = 2;

  // Group identifier
  optional string id = 3;
}

message ListItemsResponse {
  repeated TimelineItem items = 1;

  // Token indicating the response is only partial. More results can then
  // be obtained by performing the same request (including all original
  // query parameters) and setting the ``next`` parameter to this token.
  optional string continuationToken = 2;
}

message TimelineSourceCapabilities {
	optional bool readOnly = 1;
	optional bool hasManualActivities = 2;
	optional bool hasAutomatedActivities = 3;
	optional bool hasEventGroups = 4;
	optional bool hasActivityGroups = 5;
}

message ListSourcesRequest {
  // Yamcs instance name
  optional string instance = 1;
}

message ListSourcesResponse {
  map<string, TimelineSourceCapabilities> sources = 1;
}

message ListTimelineTagsRequest {
  // Yamcs instance name
  optional string instance = 1;

  optional string source = 2;
}

message ListTimelineTagsResponse {
  repeated string tags = 1;
}
/******************* End Items ***********************/


/******************* Bands ***********************/
message AddBandRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Band name
  optional string name = 2;

  //if true, all users have access to this band, otherwise only the user who has created it 
  optional bool shared = 3;
  
  //the band contains only items from this source
  optional string source = 4;

  // Items containing these tags will be part of the timeline
  repeated string tags = 5;
  
  //a query filter which can be used to limit additionally the items which are part of the band
  //  optional string filter = 6;
  
  // Type of band
  optional TimelineBandType type = 7;

  // Band description
  optional string description = 8;

  // Additional properties used by yamcs-web to render this band
  map<string, string> properties = 9;
}

message GetBandRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item identifier
  optional string id = 3;
}

message UpdateBandRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Band identifier
  optional string id = 2;
  
  // Band name
  optional string name = 3;
  
  // Band description
  optional string description = 4;
  
  //if true, all users have access to this band, otherwise only the user who has created it
  optional bool shared = 5;
  
  // Items containing these tags will be part of the timeline
  repeated string tags = 6;
  
  // Additional properties used by yamcs-web to render this band
  map<string, string> properties = 7;
}

message ListBandsRequest {
  //Yamcs instance name
  optional string instance = 1;
}

message DeleteBandRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Item identifier
  optional string id = 3;
}

message ListBandsResponse {
  repeated TimelineBand bands = 1;
}
/******************* End Bands ***********************/

/******************* Views ***********************/
message AddViewRequest {
  // Yamcs instance name
  optional string instance = 1;

  // View name
  optional string name = 2;

  // View description
  optional string description = 3;

  // The bands from this view
  repeated string bands = 4;
}

message GetViewRequest {
  // Yamcs instance name
  optional string instance = 1;

  // Item identifier
  optional string id = 3;
}

message ListViewsRequest {
  // Yamcs instance name
  optional string instance = 1;
}

message UpdateViewRequest {
  // Yamcs instance name
  optional string instance = 1;
  
  // View identifier
  optional string id = 2;

  // View name
  optional string name = 3;

  // View description
  optional string description = 4;

  // The bands from this view
  repeated string bands = 5;
}

message DeleteViewRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Item identifier
  optional string id = 3;
}

message ListViewsResponse {
  repeated TimelineView views = 1;
}
/******************* End Views ***********************/
