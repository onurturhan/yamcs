syntax="proto2";

package yamcs.protobuf.mdb;
option java_package = "org.yamcs.protobuf";

import "yamcs/api/annotations.proto";
import "yamcs/api/httpbody.proto";
import "yamcs/protobuf/yamcs.proto";

service MdbApi {

  // Get a mission database
  rpc GetMissionDatabase(GetMissionDatabaseRequest) returns (MissionDatabase) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}"
    };
  }
  
  // Export a java serialized dump of the mission database
  rpc ExportJavaMissionDatabase(ExportJavaMissionDatabaseRequest) returns (yamcs.api.HttpBody) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}:exportJava"
    };
  }
  
  // List space systems
  rpc ListSpaceSystems(ListSpaceSystemsRequest) returns (ListSpaceSystemsResponse) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/space-systems"
      field_mask_root: "spaceSystems"
    };
  }
  
  // Get a space system
  rpc GetSpaceSystem(GetSpaceSystemRequest) returns (SpaceSystemInfo) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/space-systems/{name*}"
    };
  }
  
  // List parameters
  rpc ListParameters(ListParametersRequest) returns (ListParametersResponse) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/parameters"
      field_mask_root: "parameters"
    };
  }
  
  // Get a parameter
  rpc GetParameter(GetParameterRequest) returns (ParameterInfo) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/parameters/{name*}"
    };
  }
  
  // Batch get of multiple parameters
  rpc BatchGetParameters(BatchGetParametersRequest) returns (BatchGetParametersResponse) {
    option (yamcs.api.route) = {
      post: "/api/mdb/{instance}/parameters:batchGet"
      body: "*"
    };
  }
  
  // List containers
  rpc ListContainers(ListContainersRequest) returns (ListContainersResponse) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/containers"
      field_mask_root: "containers"
    };
  }
  
  // Get a container
  rpc GetContainer(GetContainerRequest) returns (ContainerInfo) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/containers/{name*}"
    };
  }
  
  // List commands
  rpc ListCommands(ListCommandsRequest) returns (ListCommandsResponse) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/commands"
      field_mask_root: "commands"
    };
  }
  
  // Get a command
  rpc GetCommand(GetCommandRequest) returns (CommandInfo) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/commands/{name*}"
    };
  }
  
  // List algorithms
  rpc ListAlgorithms(ListAlgorithmsRequest) returns (ListAlgorithmsResponse) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/algorithms"
      field_mask_root: "algorithms"
    };
  }
  
  // Get an algorithm
  rpc GetAlgorithm(GetAlgorithmRequest) returns (AlgorithmInfo) {
    option (yamcs.api.route) = {
      get: "/api/mdb/{instance}/algorithms/{name*}"
    };
  }
}

message MissionDatabase {
  // This is the config section in mdb.yaml
  optional string configName = 1;
  
  // Root space-system name
  optional string name = 2;
  
  // Root space-system header version
  optional string version = 3;
  repeated SpaceSystemInfo spaceSystem = 4;
  optional int32 parameterCount = 6;
  optional int32 containerCount = 7;
  optional int32 commandCount = 8;
  optional int32 algorithmCount = 9;
  optional int32 parameterTypeCount = 10;
}

message HistoryInfo {
  optional string version = 1;
  optional string date = 2;
  optional string message = 3;
  optional string author = 4;
}

enum DataSourceType {
  TELEMETERED = 0;
  DERIVED = 1;
  CONSTANT = 2;
  LOCAL = 3;
  SYSTEM = 4;
  COMMAND = 5;
  COMMAND_HISTORY = 6;
  EXTERNAL1 = 7;
  EXTERNAL2 = 8;
  EXTERNAL3 = 9;
}

enum AlarmLevelType {
  NORMAL = 0;
  WATCH = 1;
  WARNING =  2;
  DISTRESS = 3;
  CRITICAL = 4;
  SEVERE = 5;
}

message UnitInfo {
  optional string unit = 1;
}

message AlarmRange {
  optional AlarmLevelType level = 1;
  optional double minInclusive = 2;
  optional double maxInclusive = 3;
  optional double minExclusive = 4;
  optional double maxExclusive = 5;
}

message EnumerationAlarm {
  optional AlarmLevelType level = 1;
  optional string label = 3;
}

message AlarmInfo {
  optional int32 minViolations = 1;
  repeated AlarmRange staticAlarmRange = 2;
  repeated EnumerationAlarm enumerationAlarm = 3;
}

message ContextAlarmInfo {
  repeated ComparisonInfo comparison = 1;
  optional AlarmInfo alarm = 2;
  
  // This can be used in UpdateParameterRequest to pass a context
  // that is parsed on the server, according to the rules in the
  // excel spreadsheet. Either this or a comparison has to be
  // used (not both at the same time)
  optional string context = 3;
}

message DataEncodingInfo {
  enum Type {
    BINARY = 0;
    BOOLEAN = 1;
    FLOAT = 2;
    INTEGER = 3;
    STRING = 4;
  }
  optional Type type = 1;
  optional bool littleEndian = 2;
  optional int32 sizeInBits = 3;
  optional string encoding = 4;
  optional CalibratorInfo defaultCalibrator = 6;
  repeated ContextCalibratorInfo contextCalibrator = 7;
}

message ContextCalibratorInfo {
  repeated ComparisonInfo comparison = 1;
  optional CalibratorInfo calibrator = 2;

  // This can be used in UpdateParameterRequest to pass a context
  // that is parsed on the server, according to the rules in the
  // excel spreadsheet. Either this or a comparison has to be
  // used (not both at the same time)
  optional string context = 3;
}

message CalibratorInfo {
  enum Type {
     POLYNOMIAL = 0;
     SPLINE = 1;
     MATH_OPERATION = 2;
     JAVA_EXPRESSION = 3;
  }
  optional PolynomialCalibratorInfo polynomialCalibrator = 2;
  optional SplineCalibratorInfo splineCalibrator = 3;
  optional JavaExpressionCalibratorInfo javaExpressionCalibrator = 4;
  optional Type type = 5;
}

message PolynomialCalibratorInfo {
  repeated double coefficient = 1;
}

message SplineCalibratorInfo {
  message SplinePointInfo {
    optional double raw = 1;
    optional double calibrated = 2;
  }
  repeated SplinePointInfo point = 1;
}

message JavaExpressionCalibratorInfo {
  optional string formula = 1;
}

message EnumValue {
  optional int64 value = 1;
  optional string label = 2;
  optional string description = 3;
}

message ParameterTypeInfo {
  optional string engType = 1;
  optional DataEncodingInfo dataEncoding = 2;
  repeated UnitInfo unitSet = 3;
  optional AlarmInfo defaultAlarm = 4;
  repeated EnumValue enumValue = 5;
  optional AbsoluteTimeInfo absoluteTimeInfo = 6;
  repeated ContextAlarmInfo contextAlarm = 7;
  repeated MemberInfo member = 8;
  optional ArrayInfo arrayInfo = 9;
  map<string, AncillaryDataInfo> ancillaryData = 10;
  
  // Provides hints on how to format the engineering
  // value as a string.
  optional NumberFormatTypeInfo numberFormat = 11;
}

message NumberFormatTypeInfo {
  optional string numberBase = 1;
  optional int32 minimumFractionDigits = 2;
  optional int32 maximumFractionDigits = 3;
  optional int32 minimumIntegerDigits = 4;
  optional int32 maximumIntegerDigits = 5;
  optional string negativeSuffix = 6;
  optional string positiveSuffix = 7;
  optional string negativePrefix = 8;
  optional string positivePrefix = 9;
  optional bool showThousandsGrouping = 10;
  optional string notation = 11;
}

message GetContainerRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Container name.
  optional string name = 2;
}

message AbsoluteTimeInfo {
  optional string initialValue = 1;
  optional double scale = 2;
  optional double offset = 3;
  optional ParameterInfo offsetFrom = 4;
  optional string epoch = 5;
}

message MemberInfo {
  optional string name = 1;
  optional string shortDescription = 3;
  optional string longDescription = 4;
  repeated NamedObjectId alias = 5;
  optional ParameterTypeInfo type = 6;
}

message ArgumentMemberInfo {
  optional string name = 1;
  optional string shortDescription = 3;
  optional string longDescription = 4;
  repeated NamedObjectId alias = 5;
  optional ArgumentTypeInfo type = 6;
}

message ParameterDimensionInfo {
  optional int64 fixedValue = 1;
  optional ParameterInfo parameter = 2;
  optional int64 slope = 3;
  optional int64 intercept = 4;
}

message ArrayInfo {
  optional ParameterTypeInfo type = 1;
  repeated ParameterDimensionInfo dimensions = 3;
}

message UsedByInfo {
  repeated AlgorithmInfo algorithm = 1;
  repeated ContainerInfo container = 2;
}

message ParameterInfo {
  optional string name = 1;
  optional string qualifiedName = 2;
  optional string shortDescription = 3;
  optional string longDescription = 4;
  repeated NamedObjectId alias = 5;
  optional ParameterTypeInfo type = 6;
  optional DataSourceType dataSource = 7;
  optional UsedByInfo usedBy = 8;
  map<string, AncillaryDataInfo> ancillaryData = 9;
  
  // Operations that return aggregate members or array entries
  // may use this field to indicate the path within the parameter.   
  repeated string path = 10;
}

message AncillaryDataInfo {
  optional string value = 1;
  optional string mimeType = 2;
  optional string href = 3;
}

message ArgumentTypeInfo {
  optional string engType = 1;
  optional DataEncodingInfo dataEncoding = 2;
  repeated UnitInfo unitSet = 3;
  
  // Enumeration states (only used by enumerated arguments)
  repeated EnumValue enumValue = 5;
  
  // Minimum value (only used by integer and float arguments)
  optional double rangeMin = 6;
  
  // Maximum value (only used by integer and float arguments)
  optional double rangeMax = 7;
  
  // Member information (only used by aggregate arguments)
  repeated ArgumentMemberInfo member = 8;
  
  // String representation of a boolean zero (only used by boolean arguments)
  optional string zeroStringValue = 9;
  
  // String representation of a boolean one (only used by boolean arguments)
  optional string oneStringValue = 10;
  
  // Minimum character count (only used by string arguments)
  optional int32 minChars = 11;
  
  // Maximum character count (only used by string arguments)
  optional int32 maxChars = 12;
  
  // True if the engineering type supports signed representation.
  // (only used by integer arguments)
  optional bool signed = 13;
  
  // Minimum byte count (only used by binary arguments)
  optional int32 minBytes = 14;
  
  // Maximum character count (only used by binary arguments)
  optional int32 maxBytes = 15;
}

message ArgumentInfo {
  optional string name = 1;
  optional string description = 2;
  //optional string type = 3;
  optional string initialValue = 4;
  // repeated UnitInfo unitSet = 5;
  optional ArgumentTypeInfo type = 6;
}

message ArgumentAssignmentInfo {
  optional string name = 1;
  optional string value = 2;
}

message SignificanceInfo {
  enum SignificanceLevelType {
    NONE = 1;
    WATCH = 2;
    WARNING = 3;
    DISTRESS = 4;
    CRITICAL = 5;
    SEVERE = 6;
  }
  optional SignificanceLevelType consequenceLevel = 1;
  optional string reasonForWarning = 2;
}

message ComparisonInfo {
  enum OperatorType {
    EQUAL_TO = 1;
    NOT_EQUAL_TO = 2;
    GREATER_THAN = 3;
    GREATER_THAN_OR_EQUAL_TO = 4;
    SMALLER_THAN = 5;
    SMALLER_THAN_OR_EQUAL_TO = 6;
  }
  optional ParameterInfo parameter = 1;
  optional OperatorType operator = 2;
  optional string value = 3;
  optional ArgumentInfo argument = 4;
}

message TransmissionConstraintInfo {
  optional string expression = 3;
  optional int64 timeout = 2;
}

message CommandInfo {
  optional string name = 1;
  optional string qualifiedName = 2;
  optional string shortDescription = 3;
  optional string longDescription = 4;
  repeated NamedObjectId alias = 5;
  optional CommandInfo baseCommand = 6;
  optional bool abstract = 7;
  repeated ArgumentInfo argument = 8;
  repeated ArgumentAssignmentInfo argumentAssignment = 9;
  optional SignificanceInfo significance = 10;
  repeated TransmissionConstraintInfo constraint = 11;
  optional CommandContainerInfo commandContainer = 13;
  repeated VerifierInfo verifier = 14;
  map<string, AncillaryDataInfo> ancillaryData = 15;
}

message VerifierInfo {
  enum TerminationActionType {
    SUCCESS = 1;
    FAIL = 2;
  }
  optional string stage = 1;
  optional ContainerInfo container = 2;
  optional AlgorithmInfo algorithm = 3;
  optional TerminationActionType onSuccess = 4;
  optional TerminationActionType onFail = 5;
  optional TerminationActionType onTimeout = 6;
  optional CheckWindowInfo checkWindow = 7;
}

message CheckWindowInfo {
  optional int64 timeToStartChecking = 1;
  optional int64 timeToStopChecking = 2;
  optional string relativeTo = 3;
}

message RepeatInfo {
  optional int64 fixedCount = 1;
  optional ParameterInfo dynamicCount = 2;
  optional int32 bitsBetween = 3;
}

message SequenceEntryInfo {
  enum ReferenceLocationType {
    CONTAINER_START = 1;
    PREVIOUS_ENTRY = 2;
  }
  optional int32 locationInBits = 1;
  optional ReferenceLocationType referenceLocation = 2;

  // For use in sequence containers
  optional ContainerInfo container = 3;
  optional ParameterInfo parameter = 4;

  // For use in command containers
  optional ArgumentInfo argument = 6;
  optional FixedValueInfo fixedValue = 7;

  optional RepeatInfo repeat = 5;
}

message FixedValueInfo {
  optional string name = 1;
  optional string hexValue = 2;
  optional int32 sizeInBits = 3;
}

message CommandContainerInfo {
  optional string name = 1;
  optional string qualifiedName = 2;
  optional string shortDescription = 3;
  optional string longDescription = 4;
  repeated NamedObjectId alias = 5;
  optional int32 sizeInBits = 6;
  optional CommandContainerInfo baseContainer = 7;
  repeated SequenceEntryInfo entry = 8;
}

message ContainerInfo {
  optional string name = 1;
  optional string qualifiedName = 2;
  optional string shortDescription = 3;
  optional string longDescription = 4;
  repeated NamedObjectId alias = 5;
  optional int64 maxInterval = 6;
  optional int32 sizeInBits = 7;
  optional ContainerInfo baseContainer = 8;
  repeated ComparisonInfo restrictionCriteria = 9;
  repeated SequenceEntryInfo entry = 10;
  optional UsedByInfo usedBy = 11;
  map<string, AncillaryDataInfo> ancillaryData = 12;
}

message InputParameterInfo {
  optional ParameterInfo parameter = 1;
  optional string inputName = 2;
  optional int32 parameterInstance = 3;
  optional bool mandatory = 4;
  optional ArgumentInfo argument = 5;
}

message OutputParameterInfo {
  optional ParameterInfo parameter = 1;
  optional string outputName = 2;
}

message AlgorithmInfo {
  enum Scope {
    GLOBAL = 0;
    COMMAND_VERIFICATION = 1;
    CONTAINER_PROCESSING = 2;
  }
  optional string name = 1;
  optional string qualifiedName = 2;
  optional string shortDescription = 3;
  optional string longDescription = 4;
  repeated NamedObjectId alias = 5;
  optional Scope scope = 6;
  optional string language = 7;
  optional string text = 8;
  repeated InputParameterInfo inputParameter = 9;
  repeated OutputParameterInfo outputParameter = 10;
  repeated ParameterInfo onParameterUpdate = 11;
  repeated int64 onPeriodicRate = 12;
}

message ListSpaceSystemsRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // The search keywords. This supports searching on the namespace or name.
  optional string q = 2;
  
  // Continuation token returned by a previous page response.
  optional string next = 7;
  
  // The zero-based row number at which to start outputting results. Default: ``0``
  optional int32 pos = 8;
  
  // The maximum number of returned containers per page. Choose this value too high
  // and you risk hitting the maximum response size limit enforced by the server.
  // Default: ``100``
  optional int32 limit = 9;
}

message ListContainersRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // The search keywords. This supports searching on the namespace or name.
  optional string q = 2;
  
  // List only direct child sub-systems or containers of the specified system.
  // For example when querying the system "/a" against an MDB with containers
  // "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
  // container "/a/c".
  //
  // When ``system`` and ``q`` are used together, matching containers at any
  // depth are returned, starting from the specified space system.
  optional string system = 10;
  
  // Continuation token returned by a previous page response.
  optional string next = 7;
  
  // The zero-based row number at which to start outputting results. Default: ``0``
  optional int32 pos = 8;
  
  // The maximum number of returned containers per page. Choose this value too high
  // and you risk hitting the maximum response size limit enforced by the server.
  // Default: ``100``
  optional int32 limit = 9;
}

message ListAlgorithmsRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // The search keywords. This supports searching on namespace or name.
  optional string q = 2;
  
  // List only direct child sub-systems or algorithms of the specified system.
  // For example when querying the system "/a" against an MDB with algorithms
  // "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
  // algorithm "/a/c".
  //
  // When ``system`` and ``q`` are used together, matching algorithms at any
  // depth are returned, starting from the specified space system.
  optional string system = 10;

  // Continuation token returned by a previous page response.
  optional string next = 7;
  
  // The zero-based row number at which to start outputting results. Default: ``0``
  optional int32 pos = 8;
  
  // The maximum number of returned algorithms per page. Choose this value too
  // high and you risk hitting the maximum response size limit enforced by
  // the server. Default: ``100``
  optional int32 limit = 9;
  
  // Include only algorithms of the specified scope
  optional AlgorithmInfo.Scope scope = 11;
}

message ListCommandsRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // The search keywords. This supports searching on namespace or name.
  optional string q = 2;
  
  // List only direct child sub-systems or commands of the specified system.
  // For example when querying the system "/a" against an MDB with commands
  // "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
  // command "/a/c".
  //
  // When ``system`` and ``q`` are used together, matching commands at any
  // depth are returned, starting from the specified space system.
  optional string system = 11;

  optional bool details = 4;
  
  // Continuation token returned by a previous page response.
  optional string next = 7;
  
  // The zero-based row number at which to start outputting results. Default: ``0``
  optional int32 pos = 8;
  
  // The maximum number of returned commands per page. Choose this value too
  // high and you risk hitting the maximum response size limit enforced by
  // the server. Default: ``100``
  optional int32 limit = 9;
  
  // Exclude abstract commands
  optional bool noAbstract = 10;
}

message GetParameterRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Parameter name.
  optional string name = 2;
}

message ListParametersRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // The search keywords. This supports searching on namespace or name.
  optional string q = 2;
  
  // When used together with ``q``, include also aggregate members (at any depth)
  // in the search.
  //
  // Note that this method returns only parameters. Members are part of the type definition.
  optional bool searchMembers = 12;
  
  // Include details on each returned parameter (this includes long
  // descriptions, aliases, and detailed type information).
  // If unset, only summary information is returned.
  optional bool details = 4;

  // The parameter types to be included in the result. Valid types are ``boolean``,
  // ``binary``, ``enumeration``, ``float``, ``integer`` or ``string``.
  // If unspecified, parameters of all types will be included.
  repeated string type = 5;
  
  // Include only parameters of the specified source.
  optional DataSourceType source = 10;
  
  // List only direct child sub-systems or parameters of the specified system.
  // For example when querying the system "/a" against an MDB with parameters
  // "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
  // parameter "/a/c".
  //
  // When ``system`` and ``q`` are used together, matching parameters at any
  // depth are returned, starting from the specified space system.
  optional string system = 11;
  
  // Continuation token returned by a previous page response.
  optional string next = 7;
  
  // The zero-based row number at which to start outputting results. Default: ``0``
  optional int32 pos = 8;
  
  // The maximum number of returned parameters per page. Choose this value too
  // high and you risk hitting the maximum response size limit enforced by the
  // server. Default: ``100``
  optional int32 limit = 9;
}

message ListParametersResponse {
  repeated string spaceSystems = 4;
  repeated ParameterInfo parameters = 1;
  
  // Token indicating the response is only partial. More results can then
  // be obtained by performing the same request (including all original
  // query parameters) and setting the ``next`` parameter to this token.
  optional string continuationToken = 2;
  
  // The total number of results (across all pages)
  optional int32 totalSize = 3;
}

message BatchGetParametersRequest {
  optional string instance = 2;
  repeated NamedObjectId id = 1;
}

message BatchGetParametersResponse {
  message GetParameterResponse {
    optional NamedObjectId id = 1;
    optional ParameterInfo parameter = 2;
  }
  repeated GetParameterResponse response = 1;
}

message ListContainersResponse {
  repeated string spaceSystems = 4;
  repeated ContainerInfo containers = 1;
  
  // Token indicating the response is only partial. More results can then
  // be obtained by performing the same request (including all original
  // query parameters) and setting the ``next`` parameter to this token.
  optional string continuationToken = 2;
  
  // The total number of results (across all pages)
  optional int32 totalSize = 3;
}

message ListCommandsResponse {
  repeated string spaceSystems = 4;
  repeated CommandInfo commands = 1;
  
  // Token indicating the response is only partial. More results can then
  // be obtained by performing the same request (including all original
  // query parameters) and setting the ``next`` parameter to this token.
  optional string continuationToken = 2;
  
  // The total number of results (across all pages)
  optional int32 totalSize = 3;
}

message ListAlgorithmsResponse {
  repeated string spaceSystems = 4;
  repeated AlgorithmInfo algorithms = 1;
  
  // Token indicating the response is only partial. More results can then
  // be obtained by performing the same request (including all original
  // query parameters) and setting the ``next`` parameter to this token.
  optional string continuationToken = 2;
  
  // The total number of results (across all pages)
  optional int32 totalSize = 3;
}

message GetAlgorithmRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Algorithm name.
  optional string name = 2;
}

message GetMissionDatabaseRequest {
  // Yamcs instance name.
  optional string instance = 1;
}

message ExportJavaMissionDatabaseRequest {
  // Yamcs instance name.
  optional string instance = 1;
}

message ListSpaceSystemsResponse {
  repeated SpaceSystemInfo spaceSystems = 1;
  
  // Token indicating the response is only partial. More results can then
  // be obtained by performing the same request (including all original
  // query parameters) and setting the ``next`` parameter to this token.
  optional string continuationToken = 2;
  
  // The total number of results (across all pages)
  optional int32 totalSize = 3;
}

message GetSpaceSystemRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Space-system name.
  optional string name = 2;
}

message GetCommandRequest {
  // Yamcs instance name.
  optional string instance = 1;
  
  // Command name.
  optional string name = 2;
}

message SpaceSystemInfo {
  optional string name = 1;
  optional string qualifiedName = 2;
  optional string shortDescription = 3;
  optional string longDescription = 4;
  repeated NamedObjectId alias = 16;
  optional string version = 5;
  repeated HistoryInfo history = 14;
  repeated SpaceSystemInfo sub = 15;
  map<string, AncillaryDataInfo> ancillaryData = 17;
}
