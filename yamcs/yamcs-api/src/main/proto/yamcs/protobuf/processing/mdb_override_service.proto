syntax="proto2";

package yamcs.protobuf.processing;

option java_package = "org.yamcs.protobuf";
option java_outer_classname = "MdbOverrideServiceProto";
option java_multiple_files = true;

import "google/protobuf/empty.proto";

import "yamcs/api/annotations.proto";
import "yamcs/protobuf/mdb/mdb.proto";

// Groups operations that support runtime changes to some parts of the MDB.
//
// These changes are always scoped to a processor, and do not persist across
// server restarts.
service MdbOverrideApi {

  // List MDB overrides
  rpc ListMdbOverrides(ListMdbOverridesRequest) returns (ListMdbOverridesResponse) {
    option (yamcs.api.route) = {
      get: "/api/mdb-overrides/{instance}/{processor}"
    };
  }
  
  // Get overrides for an algorithm
  rpc GetAlgorithmOverrides(GetAlgorithmOverridesRequest) returns (GetAlgorithmOverridesResponse) {
    option (yamcs.api.route) = {
      get: "/api/mdb-overrides/{instance}/{processor}/algorithms/{name*}"
    };
  }
  
  // Update a parameter's definition
  rpc UpdateParameter(UpdateParameterRequest) returns (mdb.ParameterTypeInfo) {
    option (yamcs.api.route) = {
      patch: "/api/mdb-overrides/{instance}/{processor}/parameters/{name*}"
      body: "*"
      additional_bindings: {
        patch: "/api/mdb/{instance}/{processor}/parameters/{name*}"
        body: "*"
      }
    };
  }
  
  // Update an algorithm's definition
  rpc UpdateAlgorithm(UpdateAlgorithmRequest) returns (google.protobuf.Empty) {
    option (yamcs.api.route) = {
      patch: "/api/mdb-overrides/{instance}/{processor}/algorithms/{name*}"
      body: "*"
      additional_bindings: {
        patch: "/api/mdb/{instance}/{processor}/algorithms/{name*}"
        body: "*"
      }
    };
  }
}

message ListMdbOverridesRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Processor name.
  optional string processor = 2;
}

message ListMdbOverridesResponse {
  repeated MdbOverrideInfo overrides = 1;
}

message GetAlgorithmOverridesRequest {
  // Yamcs instance name.
  optional string instance = 1;

  // Processor name.
  optional string processor = 2;

  // Algorithm name.
  optional string name = 3;
}

message GetAlgorithmOverridesResponse {
  optional AlgorithmTextOverride textOverride = 1;
}

message MdbOverrideInfo {
  enum OverrideType {
    ALGORITHM_TEXT = 0;
  }
  optional OverrideType type = 1;
  optional AlgorithmTextOverride algorithmTextOverride = 2;
}

message AlgorithmTextOverride {
  optional string algorithm = 1;
  optional string text = 2;
}

// Used to change calibrators or alarms for one parameter
message UpdateParameterRequest {
  enum ActionType {
  
    // Reset all parameter properties (calibrators+alarms) to their default
    // Mission Database value
    RESET = 0;
    
    // Reset calibrators to their default MDB value
    RESET_CALIBRATORS = 1;
    
    // Sets the default calibrator (the contextual ones are unmodified)
    SET_DEFAULT_CALIBRATOR = 2;
    
    // Sets all calibrations (default + contextual), if default is not set,
    // the existing calibration is not modified
    SET_CALIBRATORS = 3;
     
    // Reset alarms to their default Mission Database value
    RESET_ALARMS = 4;
    
    // Sets the default alarms (contextual ones are unmodified)
    SET_DEFAULT_ALARMS = 5;
    
    // Sets all alarms (default + contextual), if default is not set, the
    // existing alarm is not modified.
    SET_ALARMS = 6;
  }
  
  // Yamcs instance name.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
  
  // Alarm name.
  optional string name = 3;


  // The action by which to modify this alarm.
  optional ActionType action = 4;
  
  // Used when action = SET_DEFAULT_CALIBRATOR or SET_CALIBRATORS
  optional mdb.CalibratorInfo defaultCalibrator = 5;
  
  // Used when action = SET_CALIBRATORS
  repeated mdb.ContextCalibratorInfo contextCalibrator = 6;
  
  // Used when action = SET_DEFAULT_ALARMS or SET_ALARMS
  optional mdb.AlarmInfo defaultAlarm = 7;
  
  // Used when action = SET_ALARMS
  repeated mdb.ContextAlarmInfo contextAlarm = 8;
}

message UpdateAlgorithmRequest {
  enum ActionType {
    // Restores the original MDB definition
    RESET = 0;
    
    // Sets the algorithm text
    SET = 1;
  }
  
  // Yamcs instance name.
  optional string instance = 1;
  
  // Processor name.
  optional string processor = 2;
  
  // Algorithm name.
  optional string name = 3;
  
  // The action by which to modify this algorithm
  optional ActionType action = 4;
  
  // Used when action = SET
  optional mdb.AlgorithmInfo algorithm = 6;
}
