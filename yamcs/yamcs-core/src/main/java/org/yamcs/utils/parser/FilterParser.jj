options{
    STATIC=false ;
    IGNORE_CASE=true ;
}

PARSER_BEGIN(FilterParser)
package org.yamcs.utils.parser;

	
/** ID lister. */
public class FilterParser {

  public static enum Operator {
      EQUAL, NOT_EQUAL;
  }

  public static class Result {
      public final String key;
      public final Operator op;
      public final String value;
  
      public Result(String key, Operator op, String value) {
  	      this.key = key;
  	      this.op = op;
  	      this.value = value;
      }
  
      @Override
      public String toString() {
          return "Result [key: '" + key + "', op: '" + op + "', value: '" + value + "']";
      }
  }
}

PARSER_END(FilterParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
    <EQUAL: "=">
  | <NOT_EQUAL: "!=">
}

TOKEN :
{
   < STRING : (["A"-"Z","a"-"z","0"-"9", ":", "_"])+ >
  |  <QUOTED_STRING:    "\"" 
    (
       "\\" ~[]     //any escaped character
    |  ~["\"","\\"]  //any character except quote or backslash
    )* 
    "\"" > 
}

Result parse():
{Result r;}
{
   r= expr() <EOF>
   {return r;}
}

/** Top level production. */
Result expr() :
{
String key, value;
Operator op;
}
{
  key = term() op = op() value = term() { return new Result(key, op, value);}
}

String term():
{}
{
  <STRING> {return token.image;}
  | <QUOTED_STRING> {String s = token.image; return s.substring(1, s.length() - 1).replace("\\\"","\"").replace("\\\\","\\");}
}

Operator op():
{}
{
    <EQUAL> {return Operator.EQUAL;}
  | <NOT_EQUAL> {return Operator.NOT_EQUAL;}
  
  
}
