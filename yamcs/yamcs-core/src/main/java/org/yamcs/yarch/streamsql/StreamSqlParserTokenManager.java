/* Generated By:JavaCC: Do not edit this line. StreamSqlParserTokenManager.java */
package org.yamcs.yarch.streamsql;
import java.util.List;
import java.util.ArrayList;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.yamcs.utils.parser.Token;
import org.yamcs.utils.parser.SimpleCharStream;
import org.yamcs.utils.parser.ParseException;
import org.yamcs.yarch.*;
import org.yamcs.yarch.streamsql.funct.*;
import org.yamcs.yarch.TableWriter.InsertMode;

/** Token Manager. */
public class StreamSqlParserTokenManager implements StreamSqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x1fffffffffffffL) != 0L)
         {
            jjmatchedKind = 128;
            return 35;
         }
         if ((active2 & 0x400000L) != 0L)
            return 16;
         if ((active2 & 0x1000L) != 0L)
            return 13;
         return -1;
      case 1:
         if ((active0 & 0x3ff00000063000L) != 0L || (active1 & 0x1000000003eL) != 0L)
            return 35;
         if ((active0 & 0xffc00ffffff9cfe0L) != 0L || (active1 & 0x1ffeffffffffc1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 1;
            }
            return 35;
         }
         return -1;
      case 2:
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 2;
            }
            return 24;
         }
         if ((active0 & 0xcf878ffffffdc960L) != 0L || (active1 & 0x1fbeffff73ff35L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 2;
            }
            return 35;
         }
         if ((active0 & 0x3058000000002680L) != 0L || (active1 & 0x4000008c00c0L) != 0L)
            return 35;
         return -1;
      case 3:
         if ((active0 & 0x49078ded9bf1c920L) != 0L || (active1 & 0xbbe3ffc739db0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 3;
            }
            return 35;
         }
         if ((active0 & 0x86900212640c0040L) != 0L || (active1 & 0x1400c003086205L) != 0L)
            return 35;
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 3;
            }
            return 24;
         }
         return -1;
      case 4:
         if ((active0 & 0x400000004000L) != 0L || (active1 & 0x8040000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 4;
            }
            return 24;
         }
         if ((active0 & 0x901810000100900L) != 0L || (active1 & 0xb803c24001011L) != 0L)
            return 35;
         if ((active0 & 0x40060ceddbe18020L) != 0L || (active1 & 0x3e0398738da0L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 4;
            }
            return 35;
         }
         return -1;
      case 5:
         if ((active0 & 0x400000000000L) != 0L)
            return 24;
         if ((active0 & 0x8000004000L) != 0L || (active1 & 0x8840000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 5;
            }
            return 24;
         }
         if ((active0 & 0x40000800cb618020L) != 0L || (active1 & 0x18430d20L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 5;
            }
            return 35;
         }
         if ((active0 & 0x6046d10800000L) != 0L || (active1 & 0x23e3380308080L) != 0L)
            return 35;
         return -1;
      case 6:
         if ((active0 & 0x40000800c2400000L) != 0L || (active1 & 0x2018400920L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 6;
            return 35;
         }
         if ((active0 & 0x4008000204000L) != 0L || (active1 & 0x208840000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 6;
            return 24;
         }
         if ((active0 & 0x809018020L) != 0L || (active1 & 0x100030400L) != 0L)
            return 35;
         return -1;
      case 7:
         if ((active0 & 0x40000000c0000000L) != 0L || (active1 & 0x18400820L) != 0L)
            return 35;
         if ((active0 & 0x80002400000L) != 0L || (active1 & 0x2000000100L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 7;
            }
            return 35;
         }
         if ((active0 & 0x4008000204000L) != 0L || (active1 & 0x208840000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 7;
            }
            return 24;
         }
         return -1;
      case 8:
         if ((active0 & 0x4008000204000L) != 0L || (active1 & 0x208840000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 8;
            return 24;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 8;
            return 35;
         }
         if ((active0 & 0x80002000000L) != 0L || (active1 & 0x10000100L) != 0L)
            return 35;
         return -1;
      case 9:
         if ((active0 & 0x4008000204000L) != 0L || (active1 & 0x208840000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 9;
            return 24;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x2000000000L) != 0L)
            return 35;
         return -1;
      case 10:
         if ((active0 & 0x8000000000L) != 0L)
            return 24;
         if ((active0 & 0x4000000204000L) != 0L || (active1 & 0x208840000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 10;
            return 24;
         }
         return -1;
      case 11:
         if ((active1 & 0x840000000L) != 0L)
            return 24;
         if ((active0 & 0x4000000204000L) != 0L || (active1 & 0x208000000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 11;
            return 24;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000200000L) != 0L || (active1 & 0x200000000000L) != 0L)
            return 24;
         if ((active0 & 0x4000L) != 0L || (active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 12;
            return 24;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 151);
      case 38:
         return jjStopAtPos(0, 143);
      case 40:
         return jjStopAtPos(0, 133);
      case 41:
         return jjStopAtPos(0, 134);
      case 42:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 43:
         return jjStopAtPos(0, 139);
      case 44:
         return jjStopAtPos(0, 136);
      case 45:
         return jjStartNfaWithStates_0(0, 140, 13);
      case 47:
         return jjStartNfaWithStates_0(0, 150, 16);
      case 60:
         jjmatchedKind = 153;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L);
      case 61:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 62:
         jjmatchedKind = 152;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000L);
      case 63:
         return jjStopAtPos(0, 132);
      case 91:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L);
      case 93:
         return jjStopAtPos(0, 142);
      case 94:
         return jjStopAtPos(0, 145);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7fe0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x78000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f80000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3fe000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7c00000000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3ff00000000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x780000000000000L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1800000000000000L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x1L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfeL, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf00L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fff00000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fc00000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc0000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000000000L, 0x0L);
      case 124:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(1, 138);
         break;
      case 60:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         break;
      case 62:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      case 93:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40006000000L, active1, 0x3003c00101100L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x840000078008000L, active1, 0x10e3e000L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0xc000006000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x180088080000000L, active1, 0x1000c001000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000100180L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1fc01c00000600L, active1, 0x40000000004L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 104, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x7600000100610000L, active1, 0xc0200L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x380020000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20200800800L, active1, 0xc30L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000002000L, active1, 0xc00000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3c0000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000001004000L, active1, 0x200000000c1L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000080040L, active1, 0x8006000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3c00000000L);
      case 67:
      case 99:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x2008000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 35);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x80000000010L);
      case 69:
      case 101:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 110, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0xc000060000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x840000000420L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000010200000L, active1, 0x3000000200005L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000400000L, active1, 0xc000100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x9000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x30200110000L, active1, 0x6000800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x20000000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10400000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000001000800L, active1, 0x380000300L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x60800e0000000L, active1, 0x300000010000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 35);
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000604c100L, active1, 0x10000000000080L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1100000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000020L, active1, 0x20000L);
      case 87:
      case 119:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 35);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 35);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x12002800820L, active1, 0x80000008000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 35);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 35);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 35);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 35);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 35);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 35);
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x7008010000100L, active1, 0x3081a0220010L);
      case 71:
      case 103:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x1020L);
      case 72:
      case 104:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 35);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100040c08000000L, active1, 0x200000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x23c08000001L);
      case 77:
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 35);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 78:
      case 110:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000L);
      case 79:
      case 111:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000004000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 35);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x40100080L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L);
      case 82:
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x8000004000000L);
      case 83:
      case 115:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000100000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x80080000000L, active1, 0x10900L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000200000L, active1, 0x3000010400000L);
      case 87:
      case 119:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0x8040000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180010400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 68:
      case 100:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 35);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 35);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 35);
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x400001018000L, active1, 0x2023810400000L);
      case 71:
      case 103:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 35);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x120L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000100000000L, active1, 0x8100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8200000L, active1, 0x8000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40c00000020L, active1, 0x200000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 35);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x6000040400000L, active1, 0x300000020000L);
      case 83:
      case 115:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 35);
         break;
      case 84:
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 35);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 35);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 35);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0x4010800000L, active1, 0x80000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000080L);
      case 88:
      case 120:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 35);
         break;
      case 89:
      case 121:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x800000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa010000L, active1, 0x8000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 35);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 35);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 35);
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 35);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 35);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 35);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 35);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x800408000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 35);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40004000L, active1, 0x8000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x81200000L, active1, 0x10400020L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10400L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 35);
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 35);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000020000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 35);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 35);
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x200000000100L);
      case 89:
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000200000L, active1, 0x200000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x10400000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 35);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 35);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 35);
         break;
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 35);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0x8008000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 35);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0x2400000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 35);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 35);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 89:
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 35);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4080000000000L, active1, 0x202000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000L);
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 35);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8002000000L, active1, 0x10000000L);
      case 70:
      case 102:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 35);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 35);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 35);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 35);
         break;
      case 87:
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 35);
         break;
      case 78:
      case 110:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 35);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0x200000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L, active1, 0x800000000L);
      case 83:
      case 115:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 35);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 92, 35);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 35);
         break;
      case 69:
      case 101:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 101, 35);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L, active1, 0x800000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0x200000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8800000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0x200040000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 39, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L, active1, 0x8000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0x200000000000L);
      case 80:
      case 112:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 94, 24);
         break;
      case 84:
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(11, 99, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 50, 24);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 109, 24);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8000000000L);
      case 89:
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(12, 21, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 103, 24);
         break;
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(13, 14, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 35;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
               case 24:
                  if ((0x3ff401800000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(24);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 117)
                        kind = 117;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(26, 27);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddStates(6, 8);
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar != 39)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 12:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if (curChar != 45)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 42)
                     jjCheckNAddStates(9, 11);
                  break;
               case 19:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 20:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 21:
                  if (curChar == 47 && kind > 127)
                     kind = 127;
                  break;
               case 22:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 34 && kind > 131)
                     kind = 131;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(0, 5);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 3);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 14);
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAdd(24);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAddTwoStates(23, 24);
                  }
                  break;
               case 0:
               case 23:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 1:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAdd(2);
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 12:
                  jjCheckNAddTwoStates(12, 10);
                  break;
               case 14:
                  if (kind > 126)
                     kind = 126;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
               case 20:
                  jjCheckNAddTwoStates(20, 18);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(24);
                  break;
               case 26:
                  jjAddStates(15, 16);
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 35 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   29, 30, 3, 31, 32, 33, 4, 5, 6, 18, 19, 21, 31, 32, 33, 26, 
   27, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\77", "\50", "\51", "\133\135", "\54", 
"\75", "\52\52", "\53", "\55", "\133", "\135", "\46", "\174", "\136", "\74\74", 
"\76\76", "\174\174", "\52", "\57", "\41", "\76", "\74", "\75\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x213fffffffffffffL, 0x7fffff9L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0xc000000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0xc000000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[35];
private final int[] jjstateSet = new int[70];
protected char curChar;
/** Constructor. */
public StreamSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public StreamSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 35; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
