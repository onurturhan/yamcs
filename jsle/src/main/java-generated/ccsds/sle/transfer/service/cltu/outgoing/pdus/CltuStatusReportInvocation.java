/**
 * This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package ccsds.sle.transfer.service.cltu.outgoing.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import ccsds.sle.transfer.service.bind.types.SleBindReturn;
import ccsds.sle.transfer.service.bind.types.SlePeerAbort;
import ccsds.sle.transfer.service.bind.types.SleUnbindReturn;
import ccsds.sle.transfer.service.cltu.structures.BufferSize;
import ccsds.sle.transfer.service.cltu.structures.CltuGetParameter;
import ccsds.sle.transfer.service.cltu.structures.CltuIdentification;
import ccsds.sle.transfer.service.cltu.structures.CltuLastOk;
import ccsds.sle.transfer.service.cltu.structures.CltuLastProcessed;
import ccsds.sle.transfer.service.cltu.structures.CltuNotification;
import ccsds.sle.transfer.service.cltu.structures.CltuStatus;
import ccsds.sle.transfer.service.cltu.structures.DiagnosticCltuGetParameter;
import ccsds.sle.transfer.service.cltu.structures.DiagnosticCltuStart;
import ccsds.sle.transfer.service.cltu.structures.DiagnosticCltuThrowEvent;
import ccsds.sle.transfer.service.cltu.structures.DiagnosticCltuTransferData;
import ccsds.sle.transfer.service.cltu.structures.EventInvocationId;
import ccsds.sle.transfer.service.cltu.structures.NumberOfCltusProcessed;
import ccsds.sle.transfer.service.cltu.structures.NumberOfCltusRadiated;
import ccsds.sle.transfer.service.cltu.structures.NumberOfCltusReceived;
import ccsds.sle.transfer.service.cltu.structures.ProductionStatus;
import ccsds.sle.transfer.service.cltu.structures.UplinkStatus;
import ccsds.sle.transfer.service.common.pdus.SleAcknowledgement;
import ccsds.sle.transfer.service.common.pdus.SleScheduleStatusReportReturn;
import ccsds.sle.transfer.service.common.types.ConditionalTime;
import ccsds.sle.transfer.service.common.types.Credentials;
import ccsds.sle.transfer.service.common.types.InvokeId;
import ccsds.sle.transfer.service.common.types.Time;

public class CltuStatusReportInvocation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private Credentials invokerCredentials = null;
	private CltuLastProcessed cltuLastProcessed = null;
	private CltuLastOk cltuLastOk = null;
	private ProductionStatus cltuProductionStatus = null;
	private UplinkStatus uplinkStatus = null;
	private NumberOfCltusReceived numberOfCltusReceived = null;
	private NumberOfCltusProcessed numberOfCltusProcessed = null;
	private NumberOfCltusRadiated numberOfCltusRadiated = null;
	private BufferSize cltuBufferAvailable = null;
	
	public CltuStatusReportInvocation() {
	}

	public CltuStatusReportInvocation(byte[] code) {
		this.code = code;
	}

	public void setInvokerCredentials(Credentials invokerCredentials) {
		this.invokerCredentials = invokerCredentials;
	}

	public Credentials getInvokerCredentials() {
		return invokerCredentials;
	}

	public void setCltuLastProcessed(CltuLastProcessed cltuLastProcessed) {
		this.cltuLastProcessed = cltuLastProcessed;
	}

	public CltuLastProcessed getCltuLastProcessed() {
		return cltuLastProcessed;
	}

	public void setCltuLastOk(CltuLastOk cltuLastOk) {
		this.cltuLastOk = cltuLastOk;
	}

	public CltuLastOk getCltuLastOk() {
		return cltuLastOk;
	}

	public void setCltuProductionStatus(ProductionStatus cltuProductionStatus) {
		this.cltuProductionStatus = cltuProductionStatus;
	}

	public ProductionStatus getCltuProductionStatus() {
		return cltuProductionStatus;
	}

	public void setUplinkStatus(UplinkStatus uplinkStatus) {
		this.uplinkStatus = uplinkStatus;
	}

	public UplinkStatus getUplinkStatus() {
		return uplinkStatus;
	}

	public void setNumberOfCltusReceived(NumberOfCltusReceived numberOfCltusReceived) {
		this.numberOfCltusReceived = numberOfCltusReceived;
	}

	public NumberOfCltusReceived getNumberOfCltusReceived() {
		return numberOfCltusReceived;
	}

	public void setNumberOfCltusProcessed(NumberOfCltusProcessed numberOfCltusProcessed) {
		this.numberOfCltusProcessed = numberOfCltusProcessed;
	}

	public NumberOfCltusProcessed getNumberOfCltusProcessed() {
		return numberOfCltusProcessed;
	}

	public void setNumberOfCltusRadiated(NumberOfCltusRadiated numberOfCltusRadiated) {
		this.numberOfCltusRadiated = numberOfCltusRadiated;
	}

	public NumberOfCltusRadiated getNumberOfCltusRadiated() {
		return numberOfCltusRadiated;
	}

	public void setCltuBufferAvailable(BufferSize cltuBufferAvailable) {
		this.cltuBufferAvailable = cltuBufferAvailable;
	}

	public BufferSize getCltuBufferAvailable() {
		return cltuBufferAvailable;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += cltuBufferAvailable.encode(reverseOS, true);
		
		codeLength += numberOfCltusRadiated.encode(reverseOS, true);
		
		codeLength += numberOfCltusProcessed.encode(reverseOS, true);
		
		codeLength += numberOfCltusReceived.encode(reverseOS, true);
		
		codeLength += uplinkStatus.encode(reverseOS, true);
		
		codeLength += cltuProductionStatus.encode(reverseOS, true);
		
		codeLength += cltuLastOk.encode(reverseOS);
		
		codeLength += cltuLastProcessed.encode(reverseOS);
		
		codeLength += invokerCredentials.encode(reverseOS);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		invokerCredentials = new Credentials();
		subCodeLength += invokerCredentials.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		cltuLastProcessed = new CltuLastProcessed();
		subCodeLength += cltuLastProcessed.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		cltuLastOk = new CltuLastOk();
		subCodeLength += cltuLastOk.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		if (berTag.equals(ProductionStatus.tag)) {
			cltuProductionStatus = new ProductionStatus();
			subCodeLength += cltuProductionStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(UplinkStatus.tag)) {
			uplinkStatus = new UplinkStatus();
			subCodeLength += uplinkStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(NumberOfCltusReceived.tag)) {
			numberOfCltusReceived = new NumberOfCltusReceived();
			subCodeLength += numberOfCltusReceived.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(NumberOfCltusProcessed.tag)) {
			numberOfCltusProcessed = new NumberOfCltusProcessed();
			subCodeLength += numberOfCltusProcessed.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(NumberOfCltusRadiated.tag)) {
			numberOfCltusRadiated = new NumberOfCltusRadiated();
			subCodeLength += numberOfCltusRadiated.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BufferSize.tag)) {
			cltuBufferAvailable = new BufferSize();
			subCodeLength += cltuBufferAvailable.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (invokerCredentials != null) {
			sb.append("invokerCredentials: ");
			invokerCredentials.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("invokerCredentials: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cltuLastProcessed != null) {
			sb.append("cltuLastProcessed: ");
			cltuLastProcessed.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("cltuLastProcessed: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cltuLastOk != null) {
			sb.append("cltuLastOk: ");
			cltuLastOk.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("cltuLastOk: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cltuProductionStatus != null) {
			sb.append("cltuProductionStatus: ").append(cltuProductionStatus);
		}
		else {
			sb.append("cltuProductionStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (uplinkStatus != null) {
			sb.append("uplinkStatus: ").append(uplinkStatus);
		}
		else {
			sb.append("uplinkStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (numberOfCltusReceived != null) {
			sb.append("numberOfCltusReceived: ").append(numberOfCltusReceived);
		}
		else {
			sb.append("numberOfCltusReceived: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (numberOfCltusProcessed != null) {
			sb.append("numberOfCltusProcessed: ").append(numberOfCltusProcessed);
		}
		else {
			sb.append("numberOfCltusProcessed: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (numberOfCltusRadiated != null) {
			sb.append("numberOfCltusRadiated: ").append(numberOfCltusRadiated);
		}
		else {
			sb.append("numberOfCltusRadiated: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cltuBufferAvailable != null) {
			sb.append("cltuBufferAvailable: ").append(cltuBufferAvailable);
		}
		else {
			sb.append("cltuBufferAvailable: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

