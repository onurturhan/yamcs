/**
 * This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package ccsds.sle.transfer.service.fsp.outgoing.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import ccsds.sle.transfer.service.bind.types.SleBindReturn;
import ccsds.sle.transfer.service.bind.types.SlePeerAbort;
import ccsds.sle.transfer.service.bind.types.SleUnbindReturn;
import ccsds.sle.transfer.service.common.pdus.SleAcknowledgement;
import ccsds.sle.transfer.service.common.pdus.SleScheduleStatusReportReturn;
import ccsds.sle.transfer.service.common.types.ConditionalTime;
import ccsds.sle.transfer.service.common.types.Credentials;
import ccsds.sle.transfer.service.common.types.IntUnsignedLong;
import ccsds.sle.transfer.service.common.types.InvokeId;
import ccsds.sle.transfer.service.common.types.Time;
import ccsds.sle.transfer.service.fsp.structures.BufferSize;
import ccsds.sle.transfer.service.fsp.structures.DiagnosticFspGet;
import ccsds.sle.transfer.service.fsp.structures.DiagnosticFspInvokeDirective;
import ccsds.sle.transfer.service.fsp.structures.DiagnosticFspStart;
import ccsds.sle.transfer.service.fsp.structures.DiagnosticFspThrowEvent;
import ccsds.sle.transfer.service.fsp.structures.DiagnosticFspTransferData;
import ccsds.sle.transfer.service.fsp.structures.FspGetParameter;
import ccsds.sle.transfer.service.fsp.structures.FspNotification;
import ccsds.sle.transfer.service.fsp.structures.FspPacketCount;
import ccsds.sle.transfer.service.fsp.structures.FspPacketLastOk;
import ccsds.sle.transfer.service.fsp.structures.FspPacketLastProcessed;
import ccsds.sle.transfer.service.fsp.structures.FspProductionStatus;
import ccsds.sle.transfer.service.fsp.structures.PacketIdentification;

public class FspStatusReportInvocation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private Credentials invokerCredentials = null;
	private FspPacketLastProcessed fspPacketLastProcessed = null;
	private FspPacketLastOk fspPacketLastOk = null;
	private FspProductionStatus productionStatus = null;
	private FspPacketCount numberOfPacketsReceived = null;
	private FspPacketCount numberOfPacketsProcessed = null;
	private FspPacketCount numberOfPacketsRadiated = null;
	private IntUnsignedLong numberOfPacketsAcknowledged = null;
	private IntUnsignedLong fspBufferAvailable = null;
	
	public FspStatusReportInvocation() {
	}

	public FspStatusReportInvocation(byte[] code) {
		this.code = code;
	}

	public void setInvokerCredentials(Credentials invokerCredentials) {
		this.invokerCredentials = invokerCredentials;
	}

	public Credentials getInvokerCredentials() {
		return invokerCredentials;
	}

	public void setFspPacketLastProcessed(FspPacketLastProcessed fspPacketLastProcessed) {
		this.fspPacketLastProcessed = fspPacketLastProcessed;
	}

	public FspPacketLastProcessed getFspPacketLastProcessed() {
		return fspPacketLastProcessed;
	}

	public void setFspPacketLastOk(FspPacketLastOk fspPacketLastOk) {
		this.fspPacketLastOk = fspPacketLastOk;
	}

	public FspPacketLastOk getFspPacketLastOk() {
		return fspPacketLastOk;
	}

	public void setProductionStatus(FspProductionStatus productionStatus) {
		this.productionStatus = productionStatus;
	}

	public FspProductionStatus getProductionStatus() {
		return productionStatus;
	}

	public void setNumberOfPacketsReceived(FspPacketCount numberOfPacketsReceived) {
		this.numberOfPacketsReceived = numberOfPacketsReceived;
	}

	public FspPacketCount getNumberOfPacketsReceived() {
		return numberOfPacketsReceived;
	}

	public void setNumberOfPacketsProcessed(FspPacketCount numberOfPacketsProcessed) {
		this.numberOfPacketsProcessed = numberOfPacketsProcessed;
	}

	public FspPacketCount getNumberOfPacketsProcessed() {
		return numberOfPacketsProcessed;
	}

	public void setNumberOfPacketsRadiated(FspPacketCount numberOfPacketsRadiated) {
		this.numberOfPacketsRadiated = numberOfPacketsRadiated;
	}

	public FspPacketCount getNumberOfPacketsRadiated() {
		return numberOfPacketsRadiated;
	}

	public void setNumberOfPacketsAcknowledged(IntUnsignedLong numberOfPacketsAcknowledged) {
		this.numberOfPacketsAcknowledged = numberOfPacketsAcknowledged;
	}

	public IntUnsignedLong getNumberOfPacketsAcknowledged() {
		return numberOfPacketsAcknowledged;
	}

	public void setFspBufferAvailable(IntUnsignedLong fspBufferAvailable) {
		this.fspBufferAvailable = fspBufferAvailable;
	}

	public IntUnsignedLong getFspBufferAvailable() {
		return fspBufferAvailable;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += fspBufferAvailable.encode(reverseOS, true);
		
		codeLength += numberOfPacketsAcknowledged.encode(reverseOS, true);
		
		codeLength += numberOfPacketsRadiated.encode(reverseOS, true);
		
		codeLength += numberOfPacketsProcessed.encode(reverseOS, true);
		
		codeLength += numberOfPacketsReceived.encode(reverseOS, true);
		
		codeLength += productionStatus.encode(reverseOS, true);
		
		codeLength += fspPacketLastOk.encode(reverseOS);
		
		codeLength += fspPacketLastProcessed.encode(reverseOS);
		
		codeLength += invokerCredentials.encode(reverseOS);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		invokerCredentials = new Credentials();
		subCodeLength += invokerCredentials.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		fspPacketLastProcessed = new FspPacketLastProcessed();
		subCodeLength += fspPacketLastProcessed.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		fspPacketLastOk = new FspPacketLastOk();
		subCodeLength += fspPacketLastOk.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		if (berTag.equals(FspProductionStatus.tag)) {
			productionStatus = new FspProductionStatus();
			subCodeLength += productionStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(FspPacketCount.tag)) {
			numberOfPacketsReceived = new FspPacketCount();
			subCodeLength += numberOfPacketsReceived.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(FspPacketCount.tag)) {
			numberOfPacketsProcessed = new FspPacketCount();
			subCodeLength += numberOfPacketsProcessed.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(FspPacketCount.tag)) {
			numberOfPacketsRadiated = new FspPacketCount();
			subCodeLength += numberOfPacketsRadiated.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(IntUnsignedLong.tag)) {
			numberOfPacketsAcknowledged = new IntUnsignedLong();
			subCodeLength += numberOfPacketsAcknowledged.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(IntUnsignedLong.tag)) {
			fspBufferAvailable = new IntUnsignedLong();
			subCodeLength += fspBufferAvailable.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (invokerCredentials != null) {
			sb.append("invokerCredentials: ");
			invokerCredentials.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("invokerCredentials: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (fspPacketLastProcessed != null) {
			sb.append("fspPacketLastProcessed: ");
			fspPacketLastProcessed.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("fspPacketLastProcessed: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (fspPacketLastOk != null) {
			sb.append("fspPacketLastOk: ");
			fspPacketLastOk.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("fspPacketLastOk: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (productionStatus != null) {
			sb.append("productionStatus: ").append(productionStatus);
		}
		else {
			sb.append("productionStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (numberOfPacketsReceived != null) {
			sb.append("numberOfPacketsReceived: ");
			numberOfPacketsReceived.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("numberOfPacketsReceived: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (numberOfPacketsProcessed != null) {
			sb.append("numberOfPacketsProcessed: ");
			numberOfPacketsProcessed.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("numberOfPacketsProcessed: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (numberOfPacketsRadiated != null) {
			sb.append("numberOfPacketsRadiated: ");
			numberOfPacketsRadiated.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("numberOfPacketsRadiated: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (numberOfPacketsAcknowledged != null) {
			sb.append("numberOfPacketsAcknowledged: ").append(numberOfPacketsAcknowledged);
		}
		else {
			sb.append("numberOfPacketsAcknowledged: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (fspBufferAvailable != null) {
			sb.append("fspBufferAvailable: ").append(fspBufferAvailable);
		}
		else {
			sb.append("fspBufferAvailable: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

