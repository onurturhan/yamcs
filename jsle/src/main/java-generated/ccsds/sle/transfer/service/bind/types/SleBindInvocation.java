/**
 * This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package ccsds.sle.transfer.service.bind.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import ccsds.sle.transfer.service.common.types.Credentials;
import ccsds.sle.transfer.service.common.types.IntPosShort;
import ccsds.sle.transfer.service.service.instance.id.ServiceInstanceIdentifier;

public class SleBindInvocation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private Credentials invokerCredentials = null;
	private AuthorityIdentifier initiatorIdentifier = null;
	private PortId responderPortIdentifier = null;
	private ApplicationIdentifier serviceType = null;
	private VersionNumber versionNumber = null;
	private ServiceInstanceIdentifier serviceInstanceIdentifier = null;
	
	public SleBindInvocation() {
	}

	public SleBindInvocation(byte[] code) {
		this.code = code;
	}

	public void setInvokerCredentials(Credentials invokerCredentials) {
		this.invokerCredentials = invokerCredentials;
	}

	public Credentials getInvokerCredentials() {
		return invokerCredentials;
	}

	public void setInitiatorIdentifier(AuthorityIdentifier initiatorIdentifier) {
		this.initiatorIdentifier = initiatorIdentifier;
	}

	public AuthorityIdentifier getInitiatorIdentifier() {
		return initiatorIdentifier;
	}

	public void setResponderPortIdentifier(PortId responderPortIdentifier) {
		this.responderPortIdentifier = responderPortIdentifier;
	}

	public PortId getResponderPortIdentifier() {
		return responderPortIdentifier;
	}

	public void setServiceType(ApplicationIdentifier serviceType) {
		this.serviceType = serviceType;
	}

	public ApplicationIdentifier getServiceType() {
		return serviceType;
	}

	public void setVersionNumber(VersionNumber versionNumber) {
		this.versionNumber = versionNumber;
	}

	public VersionNumber getVersionNumber() {
		return versionNumber;
	}

	public void setServiceInstanceIdentifier(ServiceInstanceIdentifier serviceInstanceIdentifier) {
		this.serviceInstanceIdentifier = serviceInstanceIdentifier;
	}

	public ServiceInstanceIdentifier getServiceInstanceIdentifier() {
		return serviceInstanceIdentifier;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += serviceInstanceIdentifier.encode(reverseOS, true);
		
		codeLength += versionNumber.encode(reverseOS, true);
		
		codeLength += serviceType.encode(reverseOS, true);
		
		codeLength += responderPortIdentifier.encode(reverseOS, true);
		
		codeLength += initiatorIdentifier.encode(reverseOS, true);
		
		codeLength += invokerCredentials.encode(reverseOS);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		invokerCredentials = new Credentials();
		subCodeLength += invokerCredentials.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		if (berTag.equals(AuthorityIdentifier.tag)) {
			initiatorIdentifier = new AuthorityIdentifier();
			subCodeLength += initiatorIdentifier.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(PortId.tag)) {
			responderPortIdentifier = new PortId();
			subCodeLength += responderPortIdentifier.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(ApplicationIdentifier.tag)) {
			serviceType = new ApplicationIdentifier();
			subCodeLength += serviceType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(VersionNumber.tag)) {
			versionNumber = new VersionNumber();
			subCodeLength += versionNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(ServiceInstanceIdentifier.tag)) {
			serviceInstanceIdentifier = new ServiceInstanceIdentifier();
			subCodeLength += serviceInstanceIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (invokerCredentials != null) {
			sb.append("invokerCredentials: ");
			invokerCredentials.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("invokerCredentials: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (initiatorIdentifier != null) {
			sb.append("initiatorIdentifier: ").append(initiatorIdentifier);
		}
		else {
			sb.append("initiatorIdentifier: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (responderPortIdentifier != null) {
			sb.append("responderPortIdentifier: ").append(responderPortIdentifier);
		}
		else {
			sb.append("responderPortIdentifier: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceType != null) {
			sb.append("serviceType: ").append(serviceType);
		}
		else {
			sb.append("serviceType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (versionNumber != null) {
			sb.append("versionNumber: ").append(versionNumber);
		}
		else {
			sb.append("versionNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceInstanceIdentifier != null) {
			sb.append("serviceInstanceIdentifier: ");
			serviceInstanceIdentifier.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("serviceInstanceIdentifier: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

