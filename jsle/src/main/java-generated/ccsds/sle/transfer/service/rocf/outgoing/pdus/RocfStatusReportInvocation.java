/**
 * This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package ccsds.sle.transfer.service.rocf.outgoing.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import ccsds.sle.transfer.service.bind.types.SleBindInvocation;
import ccsds.sle.transfer.service.bind.types.SleBindReturn;
import ccsds.sle.transfer.service.bind.types.SlePeerAbort;
import ccsds.sle.transfer.service.bind.types.SleUnbindInvocation;
import ccsds.sle.transfer.service.bind.types.SleUnbindReturn;
import ccsds.sle.transfer.service.common.pdus.SleAcknowledgement;
import ccsds.sle.transfer.service.common.pdus.SleScheduleStatusReportReturn;
import ccsds.sle.transfer.service.common.types.Credentials;
import ccsds.sle.transfer.service.common.types.IntUnsignedLong;
import ccsds.sle.transfer.service.common.types.InvokeId;
import ccsds.sle.transfer.service.common.types.SpaceLinkDataUnit;
import ccsds.sle.transfer.service.common.types.Time;
import ccsds.sle.transfer.service.rocf.structures.AntennaId;
import ccsds.sle.transfer.service.rocf.structures.CarrierLockStatus;
import ccsds.sle.transfer.service.rocf.structures.DiagnosticRocfGet;
import ccsds.sle.transfer.service.rocf.structures.DiagnosticRocfStart;
import ccsds.sle.transfer.service.rocf.structures.FrameSyncLockStatus;
import ccsds.sle.transfer.service.rocf.structures.LockStatus;
import ccsds.sle.transfer.service.rocf.structures.Notification;
import ccsds.sle.transfer.service.rocf.structures.RocfGetParameter;
import ccsds.sle.transfer.service.rocf.structures.RocfProductionStatus;
import ccsds.sle.transfer.service.rocf.structures.SymbolLockStatus;

public class RocfStatusReportInvocation implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private Credentials invokerCredentials = null;
	private IntUnsignedLong processedFrameNumber = null;
	private IntUnsignedLong deliveredOcfsNumber = null;
	private FrameSyncLockStatus frameSyncLockStatus = null;
	private SymbolLockStatus symbolSyncLockStatus = null;
	private LockStatus subcarrierLockStatus = null;
	private CarrierLockStatus carrierLockStatus = null;
	private RocfProductionStatus productionStatus = null;
	
	public RocfStatusReportInvocation() {
	}

	public RocfStatusReportInvocation(byte[] code) {
		this.code = code;
	}

	public void setInvokerCredentials(Credentials invokerCredentials) {
		this.invokerCredentials = invokerCredentials;
	}

	public Credentials getInvokerCredentials() {
		return invokerCredentials;
	}

	public void setProcessedFrameNumber(IntUnsignedLong processedFrameNumber) {
		this.processedFrameNumber = processedFrameNumber;
	}

	public IntUnsignedLong getProcessedFrameNumber() {
		return processedFrameNumber;
	}

	public void setDeliveredOcfsNumber(IntUnsignedLong deliveredOcfsNumber) {
		this.deliveredOcfsNumber = deliveredOcfsNumber;
	}

	public IntUnsignedLong getDeliveredOcfsNumber() {
		return deliveredOcfsNumber;
	}

	public void setFrameSyncLockStatus(FrameSyncLockStatus frameSyncLockStatus) {
		this.frameSyncLockStatus = frameSyncLockStatus;
	}

	public FrameSyncLockStatus getFrameSyncLockStatus() {
		return frameSyncLockStatus;
	}

	public void setSymbolSyncLockStatus(SymbolLockStatus symbolSyncLockStatus) {
		this.symbolSyncLockStatus = symbolSyncLockStatus;
	}

	public SymbolLockStatus getSymbolSyncLockStatus() {
		return symbolSyncLockStatus;
	}

	public void setSubcarrierLockStatus(LockStatus subcarrierLockStatus) {
		this.subcarrierLockStatus = subcarrierLockStatus;
	}

	public LockStatus getSubcarrierLockStatus() {
		return subcarrierLockStatus;
	}

	public void setCarrierLockStatus(CarrierLockStatus carrierLockStatus) {
		this.carrierLockStatus = carrierLockStatus;
	}

	public CarrierLockStatus getCarrierLockStatus() {
		return carrierLockStatus;
	}

	public void setProductionStatus(RocfProductionStatus productionStatus) {
		this.productionStatus = productionStatus;
	}

	public RocfProductionStatus getProductionStatus() {
		return productionStatus;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += productionStatus.encode(reverseOS, true);
		
		codeLength += carrierLockStatus.encode(reverseOS, true);
		
		codeLength += subcarrierLockStatus.encode(reverseOS, true);
		
		codeLength += symbolSyncLockStatus.encode(reverseOS, true);
		
		codeLength += frameSyncLockStatus.encode(reverseOS, true);
		
		codeLength += deliveredOcfsNumber.encode(reverseOS, true);
		
		codeLength += processedFrameNumber.encode(reverseOS, true);
		
		codeLength += invokerCredentials.encode(reverseOS);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		invokerCredentials = new Credentials();
		subCodeLength += invokerCredentials.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		if (berTag.equals(IntUnsignedLong.tag)) {
			processedFrameNumber = new IntUnsignedLong();
			subCodeLength += processedFrameNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(IntUnsignedLong.tag)) {
			deliveredOcfsNumber = new IntUnsignedLong();
			subCodeLength += deliveredOcfsNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(FrameSyncLockStatus.tag)) {
			frameSyncLockStatus = new FrameSyncLockStatus();
			subCodeLength += frameSyncLockStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(SymbolLockStatus.tag)) {
			symbolSyncLockStatus = new SymbolLockStatus();
			subCodeLength += symbolSyncLockStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(LockStatus.tag)) {
			subcarrierLockStatus = new LockStatus();
			subCodeLength += subcarrierLockStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CarrierLockStatus.tag)) {
			carrierLockStatus = new CarrierLockStatus();
			subCodeLength += carrierLockStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(RocfProductionStatus.tag)) {
			productionStatus = new RocfProductionStatus();
			subCodeLength += productionStatus.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (invokerCredentials != null) {
			sb.append("invokerCredentials: ");
			invokerCredentials.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("invokerCredentials: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (processedFrameNumber != null) {
			sb.append("processedFrameNumber: ").append(processedFrameNumber);
		}
		else {
			sb.append("processedFrameNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (deliveredOcfsNumber != null) {
			sb.append("deliveredOcfsNumber: ").append(deliveredOcfsNumber);
		}
		else {
			sb.append("deliveredOcfsNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (frameSyncLockStatus != null) {
			sb.append("frameSyncLockStatus: ").append(frameSyncLockStatus);
		}
		else {
			sb.append("frameSyncLockStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (symbolSyncLockStatus != null) {
			sb.append("symbolSyncLockStatus: ").append(symbolSyncLockStatus);
		}
		else {
			sb.append("symbolSyncLockStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (subcarrierLockStatus != null) {
			sb.append("subcarrierLockStatus: ").append(subcarrierLockStatus);
		}
		else {
			sb.append("subcarrierLockStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (carrierLockStatus != null) {
			sb.append("carrierLockStatus: ").append(carrierLockStatus);
		}
		else {
			sb.append("carrierLockStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (productionStatus != null) {
			sb.append("productionStatus: ").append(productionStatus);
		}
		else {
			sb.append("productionStatus: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

